{"ast":null,"code":"var _jsxFileName = \"/Users/jeongminhyeong/Front-end Roadmap/Front-end-Roadmap-Study/9. React/nwitter by Nomad Coders/src/routes/Auth.jsx\",\n    _s = $RefreshSig$();\n\nimport { authService } from \"fbase\";\nimport React, { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Auth = props => {\n  _s();\n\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [newAccount, setNewAccount] = useState(true);\n  const [error, setError] = useState(\"\");\n\n  const onChange = event => {\n    const {\n      target: {\n        name,\n        value\n      }\n    } = event;\n\n    if (name === \"email\") {\n      setEmail(value);\n    } else if (name === \"password\") {\n      setPassword(value);\n    }\n  };\n\n  const onSubmit = async event => {\n    event.preventDefault();\n\n    try {\n      let data;\n\n      if (newAccount) {\n        data = await authService.createUserWithEmailAndPassword(email, password);\n      } else {\n        data = await authService.signInWithEmailAndPassword(email, password);\n      }\n\n      console.log(data);\n    } catch (error) {\n      setError(error.message);\n    }\n  };\n\n  const toggleAccount = () => setNewAccount(prev => !prev);\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: onSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        name: \"email\",\n        type: \"text\",\n        placeholder: \"Email\",\n        required: true,\n        value: email,\n        onChange: onChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        name: \"password\",\n        type: \"password\",\n        placeholder: \"Password\",\n        required: true,\n        value: password,\n        onChange: onChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"submit\",\n        value: newAccount ? \"Create Account\" : \"Sign In\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this), error]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      onClick: toggleAccount,\n      children: newAccount ? \"Sign In\" : \"Create Account\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        name: \"google\",\n        children: \"Continue with Google\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        name: \"gh\",\n        children: \"Continue with Github\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Auth, \"PzQQNDqROVuSUwGcld31eLJW8SE=\");\n\n_c = Auth;\nexport default Auth;\n\nvar _c;\n\n$RefreshReg$(_c, \"Auth\");","map":{"version":3,"sources":["/Users/jeongminhyeong/Front-end Roadmap/Front-end-Roadmap-Study/9. React/nwitter by Nomad Coders/src/routes/Auth.jsx"],"names":["authService","React","useState","Auth","props","email","setEmail","password","setPassword","newAccount","setNewAccount","error","setError","onChange","event","target","name","value","onSubmit","preventDefault","data","createUserWithEmailAndPassword","signInWithEmailAndPassword","console","log","message","toggleAccount","prev"],"mappings":"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","sourcesContent":["import { authService } from \"fbase\";\nimport React, { useState } from \"react\";\n\nconst Auth = (props) => {\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [newAccount, setNewAccount] = useState(true);\n  const [error, setError] = useState(\"\");\n  const onChange = (event) => {\n    const {\n      target: { name, value },\n    } = event;\n    if (name === \"email\") {\n      setEmail(value);\n    } else if (name === \"password\") {\n      setPassword(value);\n    }\n  };\n\n  const onSubmit = async (event) => {\n    event.preventDefault();\n    try {\n      let data;\n      if (newAccount) {\n        data = await authService.createUserWithEmailAndPassword(\n          email,\n          password\n        );\n      } else {\n        data = await authService.signInWithEmailAndPassword(email, password);\n      }\n      console.log(data);\n    } catch (error) {\n      setError(error.message);\n    }\n  };\n\n  const toggleAccount = () => setNewAccount((prev) => !prev);\n\n  return (\n    <div>\n      <form onSubmit={onSubmit}>\n        <input\n          name=\"email\"\n          type=\"text\"\n          placeholder=\"Email\"\n          required\n          value={email}\n          onChange={onChange}\n        />\n        <input\n          name=\"password\"\n          type=\"password\"\n          placeholder=\"Password\"\n          required\n          value={password}\n          onChange={onChange}\n        />\n        <input\n          type=\"submit\"\n          value={newAccount ? \"Create Account\" : \"Sign In\"}\n        />\n        {error}\n      </form>\n      <span onClick={toggleAccount}>\n        {newAccount ? \"Sign In\" : \"Create Account\"}\n      </span>\n      <div>\n        <button name=\"google\">Continue with Google</button>\n        <button name=\"gh\">Continue with Github</button>\n      </div>\n    </div>\n  );\n};\n\nexport default Auth;\n"]},"metadata":{},"sourceType":"module"}